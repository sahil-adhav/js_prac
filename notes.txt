var = variable
    - Will be changed over all document
    - are hoisted

    function varUse(){
        var x = 1;
        if(true){
            var x = 2;
            console.log(x); //will print 2
        }
        console.logs(x);
    }

let = block variable

    - will be available only inside block where they are declared
    - must be declared before use.
    - cant be re-declared.
    - are not hoisted
        - console.log(x);
          let x = 3;
          this will throw reference Error.

    function letUse(){
        let x = 1;
        if(true){
            let x = 2;
            console.log(x); //print 2
        }
        console.log(x) //print 1
    }

const = block constant

***************************************************************

JavaScript has 8 Datatypes
1. String
2. Number
3. Bigint
4. Boolean
5. Undefined
6. Null
7. Symbol
8. Object

The Object Datatype
The object data type can contain:

1. An object
2. An array
3. A date

***************************************************************

- String Methods

1] length()

2] Extracting string parts
    1] slice()
        - str.slice(7, 10)
        - str.slice(-12, -6)

    2] substring()
        - similar to slice() but -ve values are considered as 0.

    3] substr()
        -  similar to slice() but 2nd parameter is length of string to be extracted
        - str.substr(4, 7)
        - it will extract from 4th pos and go till 7 length.

3] replace()
    - str.replace("sahil", "Maddox");
    - returns a new string

4] toUpperCase() and toLowerCase()

5] concat()

6] trim()
    - removes white spaces

7] charAt()

8] split()
    - split(",")

    - split(" ")
        - it will split the string into array by space
        - str = "A Man";
          arr = {"A", "Man}

    - split("|")

9] Searching
    1] indexOf() = first occurence and can take second parameter as starting point if there are mutliple occurences.

    2] lastIndexOf()

    3] search() = same as indexOf() but do not have second parameter.

10] Matching
    1] match()

    2] matchAll()

11] includes()
    - return T or F

12] startsWith() AND endsWith()

***************************************************************

* string templates

let firstName = "John";
let lastName = "Doe";

let text = `Welcome ${firstName}, ${lastName}!`;

***************************************************************

* JavaScript Numbers are Always 64-bit Floating Point

***************************************************************

Sorting

- sort() considers array as string and sorts them alphabetically

- for numeric array we should do following

    const arr = [100, 1, 2, 22, 13]
    arr.sort(function(a, b){
        return a - b;
    })
    
    here if a-b is -ve then
        - a is sorted before b
        - else b is sorted before a 

***************************************************************

map() - iterates over the array.

************************************************************************************************************************************************************************************************************************************************************

Essential Set Methods
Method	Description
    new Set()	Creates a new Set
    add()	Adds a new element to the Set
    delete()	Removes an element from a Set
    has()	Returns true if a value exists in the Set
    forEach()	Invokes a callback for each element in the Set
    values()	Returns an iterator with all the values in a Set
    Property	Description
    size	Returns the number of elements in a Set

***************************************************************

JavaScript variables can belong to the local or global scope.

Global variables can be made local (private) with closures.

***************************************************************

closures

- let cnt = 0;
  
  function add(){
    let cnt = 0;
    cnt += 1;
  }

  add();
  add();
  add();


  with closures

  const add = (function() => {
    let cnt = 0;
    return function(){
        cnt += 1;
        return cnt;
    }
  })();

  A closure in JavaScript is a function that has access to variables in its outer scope even after the outer function has returned. It allows you to keep a reference to a variable from its containing scope even after the containing function has returned.

function outerFunction(x) { 
  return function innerFunction(y) {
    return x + y;
  };
}

const add5 = outerFunction(5);
console.log(add5(3)); // 8

In the example, innerFunction has access to the variable x from its outer scope, even after outerFunction has returned. When we assign outerFunction(5) to add5, we create a closure that remembers the value of x as 5. When we later call add5(3), the closure is executed and returns 8.


  ***************************************************************

  promises - A Promise in JavaScript is an object representing the eventual completion or failure of an asynchronous operation. Promises provide a way to register callbacks to be notified when the asynchronous operation is completed or failed, without blocking the execution of the rest of the code.


<p id="demo"></p>

<script>

function display(some){
    document.getElementById("demo").innerHTML = some;
}

let myPromise(function(myResolve, myReject){
    let x = 0;

    if(x == 0){
        myResolve("OK");
    }else{
        myReject("ERROR");
    }
});

myPromise.then(
    function(value){
       display(value); 
    },

    function(error){
        display(error)
    }
);

</script>


//With ASYNC and AWAIT

<script>

function display(some){
    document.getElementById("demo").innerHTML = some;
}

async function myPromise(){
    let x = 0;

    if(x == 0){
        return "OK";
    }else{
        return "ERROR";
    }
});

myPromise.then(
    function(value){
       display(value); 
    },

    function(error){
        display(error)
    }
);

</script>



ReactJS is a JavaScript library for building user interfaces. It was developed and is maintained by Facebook, and has become one of the most popular libraries for building dynamic and responsive web applications.

There are several reasons why developers choose to use ReactJS:

Reusable Components: React allows developers to create reusable UI components, making it easier to build and maintain large-scale applications. Components can be easily composed and reused throughout an application, improving code reuse and overall application performance.

Virtual DOM: React uses a virtual DOM, which is a lightweight in-memory representation of the actual DOM. This allows React to update the UI more efficiently, as it only updates the parts of the UI that have changed, rather than re-rendering the entire page.

One-way Data Binding: React follows a one-way data binding model, where data flows from the parent component to the child component. This makes it easier to understand and debug an application, as well as making it easier to manage and update state.

Performance: React is known for its high performance, as it uses a virtual DOM and only updates the parts of the UI that have changed. This results in faster and smoother updates to the UI, even for large and complex applications.

Popularity and Community: React is one of the most popular JavaScript libraries, with a large and active community of developers who contribute to the development and maintenance of the library. This results in a wealth of resources and support, making it easier for developers to learn and use React.

In conclusion, ReactJS is a powerful and flexible tool for building modern web applications. Its reusable components, virtual DOM, one-way data binding, and performance make it a popular choice among developers, while its popularity and community support make it easier to learn and use.





The main differences between functional components and class components are:

Syntax: Functional components are simple functions, while class components are ES6 classes.

State: Class components can manage state, while functional components cannot.

Lifecycle Methods: Class components can use lifecycle methods, while functional components cannot.

Performance: Functional components are generally faster than class components, as they don't have the overhead of using a class.

In general, it is recommended to use functional components whenever possible, as they are simpler, faster, and easier to understand. However, when a component needs to manage state or use lifecycle methods, a class component is required.



In React, a class component is a component that is defined as a JavaScript class, while a functional component is a component that is defined as a JavaScript function.

Class components have access to a feature called state, which is an object that holds data that can change over time. Class components can manage this state by using methods like setState(), which updates the component's state and triggers a re-render of the component. This allows class components to dynamically update their UI based on changes in state.

On the other hand, functional components do not have access to state, as they are just simple JavaScript functions. They receive props as input and return a React element. As a result, functional components cannot manage state themselves, and they rely on other parts of the application to pass data to them through props.

That being said, with the advent of React Hooks, functional components can now manage state using hooks like useState and useReducer. This has made functional components more powerful and made it possible for them to perform many of the same functions as class components, including managing state.




In React, lifecycle methods are special methods that are called at specific points during a component's lifecycle, such as when it is being created, updated, or destroyed. These methods allow developers to perform specific actions at specific times, such as fetching data, updating the component's state, or triggering side effects.

There are three main phases in the lifecycle of a React component:

Mounting: This phase begins when a component is added to the DOM for the first time, and it includes the following lifecycle methods:

constructor(): This is the first method that is called when a component is created. It is typically used to initialize state and bind event handlers.
componentWillMount(): This method is called just before a component is mounted to the DOM.
render(): This method is called to render the component.
componentDidMount(): This method is called immediately after a component is mounted to the DOM. It is often used to fetch data or perform any other setup that requires the component to be fully rendered.
Updating: This phase occurs when a component's state or props change, and it includes the following lifecycle methods:

componentWillReceiveProps(): This method is called when a component is about to receive new props.
shouldComponentUpdate(): This method is called before the render method, and it allows a component to decide whether or not it should update.
componentWillUpdate(): This method is called just before a component updates.
render(): This method is called to render the updated component.
componentDidUpdate(): This method is called immediately after a component updates.
Unmounting: This phase occurs when a component is being removed from the DOM, and it includes the following lifecycle method:

componentWillUnmount(): This method is called just before a component is unmounted and destroyed.
Note: With the advent of React Hooks, some of the lifecycle methods are being replaced by hooks like useEffect, useState, and useContext, which offer a more straightforward and flexible way of handling component state and side effects.





